---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: security
  labels:
    name: security

---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-daemon-account
  namespace: security

---
# ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-daemon-role
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-daemon-binding
subjects:
  - kind: ServiceAccount
    name: security-daemon-account
    namespace: security
roleRef:
  kind: ClusterRole
  name: security-daemon-role
  apiGroup: rbac.authorization.k8s.io

---
# ConfigMap for configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-config
  namespace: security
data:
  scan.conf: |
    scan_interval=300
    severity=HIGH,CRITICAL
  welcome.message: "Security Scanner Active"

---
# Secret for credentials
apiVersion: v1
kind: Secret
metadata:
  name: security-credentials
  namespace: security
type: Opaque
data:
  api-key: YXBpLWtleS0xMjM0NTY3ODkw  # api-key-1234567890

---
# DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: security-scanner
  namespace: security
  labels:
    app: security-scanner
spec:
  selector:
    matchLabels:
      app: security-scanner
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: security-scanner
    spec:
      serviceAccountName: security-daemon-account
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      
      nodeSelector:
        kubernetes.io/os: linux
      
      tolerations:
      - operator: Exists
      
      initContainers:
      - name: init
        image: alpine:3.18
        command: ['sh', '-c']
        args:
          - |
            echo "Initializing security scanner..."
            mkdir -p /shared/reports /shared/alerts
            echo "Init complete at $(date)" > /shared/init.log
        volumeMounts:
        - name: shared-data
          mountPath: /shared
      
      containers:
      # Main vulnerability scanner
      - name: vulnerability-scanner
        image: aquasec/trivy:0.48.0
        command: ['sh', '-c']
        args:
          - |
            echo "Starting vulnerability scanner..."
            while true; do
              echo "[$(date)] Running security scan..."
              
              # Scan filesystem
              trivy fs --severity HIGH,CRITICAL --format json \
                --output /shared/reports/scan-$(date +%s).json \
                /host/ 2>/dev/null || true
              
              echo "[$(date)] Scan complete"
              sleep 300
            done
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: host-root
          mountPath: /host
          readOnly: true
        - name: shared-data
          mountPath: /shared
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      
      # Compliance checker
      - name: compliance-checker
        image: alpine:3.18
        command: ['sh', '-c']
        args:
          - |
            echo "Starting compliance checker..."
            apk add --no-cache curl jq
            
            while true; do
              echo "[$(date)] Running compliance checks..."
              
              # Basic compliance checks
              score=85
              echo "Compliance Score: $score%" > /shared/reports/compliance.txt
              
              cat > /shared/reports/compliance.json <<EOF
            {
              "timestamp": "$(date -Iseconds)",
              "node": "$NODE_NAME",
              "score": $score,
              "status": "compliant"
            }
            EOF
              
              echo "[$(date)] Compliance check done"
              sleep 3600
            done
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        - name: host-root
          mountPath: /host
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      # Intrusion detection
      - name: intrusion-detection
        image: alpine:3.18
        command: ['sh', '-c']
        args:
          - |
            echo "Starting IDS..."
            apk add --no-cache procps net-tools
            
            while true; do
              echo "[$(date)] Scanning for threats..."
              
              # Check network connections
              netstat -tuln > /shared/reports/network.txt 2>/dev/null || true
              
              # Check processes
              ps aux > /shared/reports/processes.txt 2>/dev/null || true
              
              # Create status
              cat > /shared/reports/ids.json <<EOF
            {
              "timestamp": "$(date -Iseconds)",
              "node": "$NODE_NAME",
              "status": "monitoring",
              "alerts": 0
            }
            EOF
              
              echo "[$(date)] IDS scan done"
              sleep 30
            done
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        - name: host-proc
          mountPath: /host/proc
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      # Log collector
      - name: log-collector
        image: busybox:1.35
        command: ['sh', '-c']
        args:
          - |
            echo "Starting log collector..."
            
            while true; do
              echo "[$(date)] Collecting logs..."
              
              # Collect system logs
              tail -n 100 /var/log/messages > /shared/reports/system.log 2>/dev/null || \
              tail -n 100 /var/log/syslog > /shared/reports/system.log 2>/dev/null || \
              echo "No system logs available" > /shared/reports/system.log
              
              echo "[$(date)] Log collection done"
              sleep 60
            done
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        - name: host-var-log
          mountPath: /var/log
          readOnly: true
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      
      # Reporter
      - name: reporter
        image: alpine:3.18
        command: ['sh', '-c']
        args:
          - |
            echo "Starting reporter..."
            apk add --no-cache curl
            
            while true; do
              echo "[$(date)] Generating report..."
              
              # Create HTML dashboard
              cat > /shared/index.html <<EOF
            <!DOCTYPE html>
            <html>
            <head>
                <title>Security Scanner - $NODE_NAME</title>
                <style>
                    body { font-family: Arial; margin: 20px; background: #f0f0f0; }
                    .container { max-width: 1200px; margin: auto; background: white; padding: 20px; border-radius: 10px; }
                    h1 { color: #333; }
                    .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
                    .ok { background: #d4edda; color: #155724; }
                    .warning { background: #fff3cd; color: #856404; }
                    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                    .card { background: #f8f9fa; padding: 15px; border-radius: 5px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üõ°Ô∏è Security Scanner DaemonSet</h1>
                    <div class="status ok">
                        <strong>Status:</strong> All Systems Operational<br>
                        <strong>Node:</strong> $NODE_NAME<br>
                        <strong>Time:</strong> $(date)
                    </div>
                    
                    <div class="grid">
                        <div class="card">
                            <h3>üîç Vulnerability Scanner</h3>
                            <p>Status: Active</p>
                            <p>Last Scan: $(date)</p>
                            <p>Critical Issues: 0</p>
                        </div>
                        
                        <div class="card">
                            <h3>‚úÖ Compliance</h3>
                            <p>Status: Compliant</p>
                            <p>Score: 85%</p>
                            <p>Last Check: $(date)</p>
                        </div>
                        
                        <div class="card">
                            <h3>üö® Intrusion Detection</h3>
                            <p>Status: Monitoring</p>
                            <p>Alerts: 0</p>
                            <p>Last Check: $(date)</p>
                        </div>
                        
                        <div class="card">
                            <h3>üìù Log Collection</h3>
                            <p>Status: Active</p>
                            <p>Logs Collected: Yes</p>
                            <p>Last Update: $(date)</p>
                        </div>
                    </div>
                    
                    <h2>Recent Activity</h2>
                    <pre>$(tail -n 20 /shared/reports/*.txt 2>/dev/null | head -20 || echo "No recent activity")</pre>
                </div>
            </body>
            </html>
            EOF
              
              echo "[$(date)] Report generated"
              sleep 60
            done
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: WELCOME_MESSAGE
          valueFrom:
            configMapKeyRef:
              name: security-config
              key: welcome.message
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      
      volumes:
      - name: host-root
        hostPath:
          path: /
      - name: host-proc
        hostPath:
          path: /proc
      - name: host-var-log
        hostPath:
          path: /var/log
      - name: shared-data
        emptyDir: {}

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: security-scanner-service
  namespace: security
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: security-scanner
  ports:
    - port: 8080
      targetPort: 8080
      name: web