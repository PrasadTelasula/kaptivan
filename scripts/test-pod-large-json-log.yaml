apiVersion: v1
kind: Pod
metadata:
  name: json-log-generator
  labels:
    app: json-logger
spec:
  restartPolicy: Always
  containers:
  - name: json-generator
    image: python:3.9-slim
    command: ["/bin/sh", "-c"]
    args:
      - |
        cat << 'EOF' > /tmp/generate_json.py
        import json
        import time
        import random
        import string
        from datetime import datetime, timezone

        def generate_random_string(length=10):
            return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

        def generate_nested_object(depth=2, breadth=3):
            if depth <= 0:
                value_type = random.choice(['string', 'number', 'boolean'])
                if value_type == 'string':
                    return generate_random_string(random.randint(5, 15))
                elif value_type == 'number':
                    return random.uniform(-100, 100)
                else:
                    return random.choice([True, False])
            
            obj = {}
            for i in range(random.randint(2, breadth)):
                key = f"field_{generate_random_string(6)}"
                obj[key] = generate_nested_object(depth - 1, breadth)
            return obj

        def generate_large_json():
            # Create a moderately sized nested JSON structure
            data = {
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "event_id": generate_random_string(16),
                "log_level": random.choice(["DEBUG", "INFO", "WARNING", "ERROR"]),
                "service": {
                    "name": "json-log-generator",
                    "version": "1.0.0",
                    "instance_id": generate_random_string(12)
                },
                "metadata": {
                    "request_id": generate_random_string(16),
                    "user": {
                        "id": random.randint(1000, 99999),
                        "username": f"user_{generate_random_string(6)}",
                        "attributes": generate_nested_object(depth=2, breadth=3)
                    }
                },
                "payload": {
                    "action": random.choice(["CREATE", "UPDATE", "DELETE", "READ"]),
                    "resource": {
                        "type": random.choice(["document", "user", "order"]),
                        "id": generate_random_string(12),
                        "data": generate_nested_object(depth=3, breadth=3)
                    },
                    "metrics": {
                        "cpu_usage": random.uniform(0, 100),
                        "memory_usage": random.uniform(0, 100),
                        "request_duration_ms": random.uniform(10, 5000)
                    }
                },
                "nested_data": {
                    "level1": generate_nested_object(depth=3, breadth=3),
                    "level2": {
                        "sublevel1": generate_nested_object(depth=2, breadth=3),
                        "items": [generate_nested_object(depth=2, breadth=2) for _ in range(3)]
                    }
                }
            }
            
            return data

        # Main loop
        print("Starting JSON log generator...", flush=True)
        while True:
            try:
                # Generate large nested JSON
                json_data = generate_large_json()
                
                # Print as single line JSON (common log format)
                print(json.dumps(json_data), flush=True)
                
                # Wait 2 seconds before next log
                time.sleep(2)
                
            except Exception as e:
                error_log = {
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "error": str(e),
                    "type": "generator_error"
                }
                print(json.dumps(error_log), flush=True)
                time.sleep(2)
        EOF
        
        python /tmp/generate_json.py
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"